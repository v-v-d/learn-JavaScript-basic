У многих возникают проблемы с пониманием того что такое объекты. Хочу здесь рассказать еще раз,
но немного другими словами.
Ниже текстом ничего нового не будет, все будет то же самое, объяснения и пара примеров.

Объект в javascript - это более сложный тип данных. У нас есть числа, строки, булева значения,
это простые, примитивные типы, заложенные сразу в самом языке.
Объекты - типы составные, мы их может сами создать такими, которые нам нужны.

Начнем с простого.
Объект - можно представить себе как коллекцию данных. Коллекция, если проще - это когда в переменную
мы можем положить несколько данных сразу. Например мы можем спокойно создать объект, который будет
хранить данные о каком-то конкретном человеке:

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
};
```

Что мы здесь сделали, мы в один объект, положили несколько данных, мы храним в одной переменной
person объект, в котором есть данные о человеке, его имени, фамилии, весе и годе рождения. И это
удобно, все данные, которые относятся к этому человеку мы храним вместе, не разбивая по различным
переменным.

Вы можете сказать - можно и массив использовать - да, можно, давайте перепишем все эти данные в
массив, тем более что массив это тот же объект, но немного "докрученный", чтобы хранить данные по
порядку:

```
const person = ["Павел", "Тарасов", 90, 1990];
```

Даже короче получилось. Однако проблема в том, что мне сейчас придется помнить какие данные под
какими цифрми лежат. Под каким индексом лежит год рожения, под каким имя и т.д. Это неудобно и
будет путать.
Чтобы получить что-то, нужно записать

```
const person = ["Павел", "Тарасов", 90, 1990];
console.log(person[3]);
```

Вот что такое 3, что лежит под тройкой? Придется разбираться, внимательно смотреть.

С объектом же намного проще,

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
};
console.log(person.yearOfBirth);
```

И вопросов здесь уже нет. Мы у человека получаем год рождения, зная английский это сразу
становится понятно.

Сейчас наш человек, наш объект - это просто набор данных, он ничего делать не умеет, просто хранит
данные о каком-то определенном человеке, не более того. Такие объекты называются DTO, data transfer
object. Объекты, которые просто хранят данные и если мне сейчас нужно будет куда-то передать данные
об этом человеке, я просто могу скинуть этот объект. Например передать в функцию.

Мы можем научить нашего человека чему-нибудь. Чтобы он что-то умел делать, давайте научим его
складывать числа, мы ему будем передавать числа по одному, он будет считать сумму этих чисел и научим
его говорить результат, какая итоговая сумма получилась.

Давайте сделаем метод, метод - это когда мы обычную функцию помещаем в свойство объекта.
Создадим метод, который будет считать числа, просто мы ему будем передавать числа, а он будет их
прибавлять и сохранять. Ну и для проверки сразу выведем эту сумму.

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,

    addNumber(num) {
        let sum = 0;
        sum += num;
        console.log(sum);
    },
};

person.addNumber(5);
person.addNumber(10);
```

Странно, у нас ничего не прибавляется... Почему?
На самом деле, когда мы вызываем этот метод, происходит выполнение кода, который записан внутри этого
метода. Там у нас создается переменная sum, в которой лежит 0, прибавляется к сумме значение и
выводится эта сумма. Когда наш метод заканчивается, переменная sum удаляется, так как больше становится
не нужна, выходя из области видимости, она сотрется.
Когда мы снова вызываем этот метод, то снова создастся новая переменная sum и в ней снова будет 0,
прибавится num и выведется значение.

Таким образом:

```
person.addNumber.sum = 5;
```

мы тоже не можем поменять значение sum, так как это переменная, это не свойство, да и addNumber - это
функция, метод, мы их обычно вызываем, т.е. ставим скобки.

А как тогда быть? Мы можем научить нашего человека запоминать это значение между вызоывами метода.
Мы можем создать дополнительное свойство, в котором будет храниться значение суммы, а потом это
свойство использовать внутри нашего метода:

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
    sum: 0,

    addNumber(num) {
        this.sum += num;
        console.log(this.sum);
    },
};

person.addNumber(5);
person.addNumber(10);
```

Теперь работать будет верно, объект хранит в себе свойства, эти значения будут жить и существовать пока
существует сам объект. А значит когда мы вызвали метод первый раз мы к нашему свойству прибавили 5.
Когда мы вызвали второй раз метод, мы прибавили к свойству 10. В итоге у нас получилось 15.

Мне однако не нравится что метод у нас выводит данные. Его дело - сложить, но не выводить. Предлагаю
убрать оттуда вывод данных и сделать для этого еще один метод.

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
    sum: 0,

    addNumber(num) {
        this.sum += num;
    },

    saySum() {
        console.log(this.sum);
    },
};

person.addNumber(5);
person.addNumber(10);

person.saySum();
```

Теперь мы сложим цифры, причем мы можем вызывать этот метод сколько угодно раз, а когда нам потребуется
вывести результат, мы можем вызвать метод saySum, который выведет его в консоль.
Хм... А если я захочу вывести еще и в алерт или на сайт? Еще методы создавать?

Мы ведь на самом деле можем просто эти данные получить.

```
alert("Сумма: " + person.sum);
```

и вывести их как угодно и куда угодно. Однако мы легко можем ошибиться и получать не то что нам нужно,
взять и написать

```
alert("Сумма: " + person.summ);
```

И все будет работать, никакой ошибки не будет, просто будет работать не так как нам надо, у нас будет
undefined.
Чтобы избежать таких опечаток, лучше создать метод, который нам будет возвращать это значение, например:

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
    sum: 0,

    addNumber(num) {
        this.sum += num;
    },

    getSum() {
        return this.sum;
    },
};

person.addNumber(5);
person.addNumber(10);

console.log(person.getSum());
alert(person.getSum());
```

Такие методы называют геттерами, это методы, которые что-то возвращают, они и начинаются со слова get,
с англ. "получить". Ну и так мы можем выводить данные куда угодно. И если мы сделаем ошибку в нашем методе,
то мы сразу получим ошибку, а значит сразу ее обнаружим.
Нам в данном случае нужно только один раз правильно написать функцию, а потом ее спокойно использовать.

Мы можем установить и сеттеры, это методы, которые ставят значения в наши свойства. Например,

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
    sum: 0,

    addNumber(num) {
        this.sum += num;
    },

    getSum() {
        return this.sum;
    },

    setSum(sum) {
        this.sum = sum;
    },
};

person.setSum(100);
person.addNumber(5);
person.addNumber(10);

console.log(person.getSum());
alert(person.getSum());
```

Теперь у нас пользователь считать будет не с нуля, а с сотни.

Геттеры и сеттеры можно поставить и на все другие свойства наших объектов, но пока они нам особо не нужны.
Хотя, знаете, я бы хотел иметь возможность получать полное имя и фамилию разом, давайте сделаем специальный
геттер для этого.

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    weight: 90,
    yearOfBirth: 1990,
    sum: 0,

    addNumber(num) {
        this.sum += num;
    },

    getSum() {
        return this.sum;
    },

    setSum(sum) {
        this.sum = sum;
    },

    getFullName() {
        return `${this.name} ${this.surname}`;
    },
};

console.log(person.getFullName());
alert(person.getFullName());
```

геттеры и сеттеры, это не какие-то специальные методы в языке, нет, их можно назвать и по-другому, просто
это название геттер/сеттер отражает суть этих функций, что они делают, возвращают значения или их ставят.

Таким образом можно и дальше развивать объект и добавлять какие-то удобные методы, которые что-то делают.
Хочу чтоб было понятно что если мы пишем метод в объекте, то он должен работать с этим объектом. Не должно
быть такого что вы создаете метод, а этот метод работает совсем с какими-то левыми данными.

Хочу отметить еще одну ситуацию, когда вы объявляете объект и он создается, его методов еще нет и вызвать
методы или обратиться к свойствам пока нельзя. То есть, такой пример:

```
const person = {
    name: "Павел",
    surname: "Тарасов",
    fullName: this.getFullName(), // <--- здесь
    weight: 90,
    yearOfBirth: 1990,
    sum: 0,

    addNumber(num) {
        this.sum += num;
    },

    getSum() {
        return this.sum;
    },

    setSum(sum) {
        this.sum = sum;
    },

    getFullName() {
        return `${this.name} ${this.surname}`;
    },
};
```

fullName: this.getFullName(), - так записать нельзя, у нас только создается объект, мы не можем использовать
его методы когда он еще не создан. Да и мало того, на самом деле this здесь это и не наш объект, нашего
объекта пока еще нет, в данном случае this - это будет глобальный объект window, отвечающий за окно самой
страницы. Запомните, this мы пользуемся только внутри какого-то метода, просто так this мы не пишем.
Про то как работает this мы еще поговорим чуть позже.

-----------------------------------------

Также хочу немного поговорить про ситуацию, когда у нас несколько объектов.
Представим пример:

```
const settings = {a: 'hello', b: 'bye'};
const program = {};
```

У нас есть настройки (settings) и объект program - наша программа, где эти настройки будут использоваться.
Внутри метода объекта program мы имеем доступ до наших настроек:

```
const settings = {a: 'hello', b: 'bye'};
const program = {
    myMethod() {
        console.log(settings.a); // hello
    }
};
program.myMethod(); // выведет hello.
```

Сначала переменная settings ищется внутри метода myMethod, там такой нет, затем эта переменная settings
ищется в глобальной области, там и найдет этот объект и спокойно получим из него данные.
В целом, сейчас мы спокойно можем продолжать так работать и все будет хорошо. Но есть определенные
архитектурные правила, которым зачастую следуют программисты, вы их пройдете позже.
Представьте ситуацию, в которой вы поменяете название переменной или вам нужно будет иметь 2 копии settings,
одну для одного объекта, но и во втором объекте тоже используется переменная settings, а там нужны уже
совершенно другие настройки. Не очень хорошая практика обращаться к внешним переменным из функции/метода.
Что будем делать мы?

```
const settings = {a: 'hello', b: 'bye'};
const program = {
    settings, // <-- добавили

    myMethod() {
        console.log(this.settings.a); // hello
    }
};
program.myMethod(); // выведет hello.
```

Мы просто добавим в нашу программу settings как свойство, тогда мы можем поставить туда любое значение.
Да, в данном случае эта запись ровно такая же как мы бы написали

```
settings: settings,
```

т.е. мы говорим что в объекте будет свойство settings, в этом свойстве будет лежать то же что и во внешней
переменной settings.
Что нам дает такой подход?
Если мы внутри нашего объекта program много раз будем использовать наши настройки, в разных местах, то нам
потом не составит труда заменить у объекта settings название:

```
const config = {a: 'hello', b: 'bye'}; // переменная названа по-другому.
const program = {
    settings: config, // <-- изменили переменную, которая лежит в том же свойстве settings.

    myMethod() {
        console.log(this.settings.a); // hello, здесь все будет работать как обычно.
    }
};
program.myMethod(); // выведет hello.
```

Мы поменяли название переменной и внутри просто указали на какую переменную нам ссылаться и все, больше
ничего мы не трогали. Это удобно.

Однако данный подход тоже не самый идеальный. Когда вы пройдете ООП, почитаете про принципы SOLID, GRASP, вы
поймете что лучше сделать так, чтобы наш объект не зависел ни от чего вообще. Сейчас полностью это сделать
невозможно, но когда вы на js2 будете проходить функции-конструкторы, там вы увидите что при создании объекта,
ему можно передать все нужные данные, что-то наподобии метода init, только init мы вызываем руками, а там все
будет работать автоматом и при создании объекта, в нем будут сразу лежать все нужные данные.

Пока не стоит сильно загонять себя этими вещами, мы работаем немного по другой схеме в силу того что пока еще
не прошли нужных тем.

В общем-то это все что хотел рассказать. Всем спасибо!