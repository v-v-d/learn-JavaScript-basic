"use strict";

/**
 * Загаданное число, которое пользователь будет отгадывать.
 * @var {int}
 */
let number;

/**
 * Загаданное число, которое пользователь будет отгадывать.
 * @var {int}
 */
let attempts;

// Обнуляем значения загадки и попыток для игры.
resetGame();
// Запускаем игру.
tryGuessNumber();

/**
 * Функция обнуляет количество попыток и загадывает новое число.
 */
function resetGame() {
  attempts = 0;
  // Формула: min + Math.floor(Math.random() * (max - min))
  number = Math.floor(Math.random() * 100);
}

/**
 * Функция спрашивает у пользователя число до тех пор, пока он не выйдет или не откажется
 * сыграть еще раз после победы.
 * @returns {void} Ничего функция не возвращает.
 */
function tryGuessNumber() {
  // Спрашиваем у пользователя число и превращаем в целое число.
  const userAnswer = parseInt(prompt('Введите число от 0 до 100, для выхода наберите -1.'));

  // Если пользователь хочет выйти - выходим из функции.
  if (userAnswer === -1) {
    return alert('До свидания.');
  }

  // Если пользователь ввел не число - сообщаем ему об этом.
  if (Number.isNaN(userAnswer)) {
    alert('Необходимо ввести целое число от 0 до 100.');
    return tryGuessNumber();
  }

  // Прибавляем единицу к количеству попыток.
  attempts++;

  // Определяем какое число ввел пользователь, больше, меньше или он отгадал.
  if (userAnswer > number) {
    alert('Попробуйте число меньше.');
  } else if (userAnswer < number) {
    alert('Попробуйте число больше.');
  } else {
    alert(`Поздравляю! Вы угадали число с ${attempts} попытки.`);
    // Если пользователь не согласился сыграть еще раз, выходим из функции.
    if (!confirm('Хотите сыграть еще раз?')) {
      return alert('До свидания.');
    }
    // Если из функции не вышли, значит пользователь согласился сыграть еще раз,
    // обнуляем количество попыток и загадываем новое число.
    resetGame();
  }

  // Вызываем занова нашу функцию.
  tryGuessNumber();
}
